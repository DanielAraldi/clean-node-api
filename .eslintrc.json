{
  // Add typescript configs on eslint with standard
  "extends": "standard-with-typescript",
  "parserOptions": {
    "project": "./tsconfig.eslint.json"
  },
  "rules": {
		"@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/strict-boolean-expressions": "off",
		"@typescript-eslint/no-unused-vars": "off",
		"@typescript-eslint/quotes": "off",
		"@typescript-eslint/camelcase": "off",
		"@typescript-eslint/indent": "off",
		"@typescript-eslint/brace-style": "off",
		"@typescript-eslint/member-delimiter-style": ["error", {
			"multiline": {
				"requireLast": true
    	}
			}],
			"@typescript-eslint/no-misused-promises": [
				"error",
				{
					"checksVoidReturn": false
				}
			],
			"@typescript-eslint/naming-convention": ["error",
				{
					"selector": ["variableLike"],
					"format": ["camelCase", "PascalCase"],
					"leadingUnderscore": "allow"
				},
				{
					"selector": "typeLike",
					"format": ["camelCase", "PascalCase"]
				}
			],
		"promise/param-names": "off",
		"comma-dangle": ["error", {
			"objects": "always-multiline",
			"arrays": "only-multiline",
			"imports": "always-multiline"
		}],
		"semi": ["error", "always"],
		"space-before-function-paren": ["error", {
			"anonymous": "never",
			"named": "never",
			"asyncArrow": "always"
		}],
		"new-cap": ["error", {
			"newIsCap": false,
			"capIsNew": false
		}]
  }
}